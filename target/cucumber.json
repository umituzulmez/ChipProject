[
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-05-20T18:36:49.430Z",
        "line": 5,
        "name": "User should be able to send a text in content type \"json\"",
        "description": "",
        "id": "content-type-validation-tests;user-should-be-able-to-send-a-text-in-content-type-\"json\"",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.reflection.ReflectionCache\n\tat org.codehaus.groovy.runtime.dgmimpl.NumberNumberMetaMethod.\u003cclinit\u003e(NumberNumberMetaMethod.java:33)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.createMetaMethodFromClass(MetaClassRegistryImpl.java:258)\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.\u003cinit\u003e(MetaClassRegistryImpl.java:111)\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.\u003cinit\u003e(MetaClassRegistryImpl.java:86)\n\tat groovy.lang.GroovySystem.\u003cclinit\u003e(GroovySystem.java:36)\n\tat org.codehaus.groovy.runtime.InvokerHelper.\u003cclinit\u003e(InvokerHelper.java:86)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.createMap(ScriptBytecodeAdapter.java:635)\n\tat io.restassured.internal.ResponseParserRegistrar.\u003cinit\u003e(ResponseParserRegistrar.groovy)\n\tat io.restassured.RestAssured.\u003cclinit\u003e(RestAssured.java:347)\n\tat com.Chip.microservices.PurgoMalumManager.getText(PurgoMalumManager.java:25)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(PurgoMalumStepDefs.java:51)\n\tat ✽.User sends a text to PurgoMalum in following type(file:src/test/resources/features/ContentTypeValidation.feature:6)\n",
              "duration": 111884583,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a text to PurgoMalum in following type",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Just Testing"
                ]
              },
              {
                "cells": [
                  "request type",
                  "json"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 424405,
              "status": "skipped"
            },
            "line": 9,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 327802,
              "status": "skipped"
            },
            "line": 10,
            "name": "User should get correct type as response",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_correct_type_as_response()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@contentType"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@positive"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.593Z",
        "line": 13,
        "name": "User should be able to send a text in content type \"xml\"",
        "description": "",
        "id": "content-type-validation-tests;user-should-be-able-to-send-a-text-in-content-type-\"xml\"",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.getText(PurgoMalumManager.java:25)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(PurgoMalumStepDefs.java:51)\n\tat ✽.User sends a text to PurgoMalum in following type(file:src/test/resources/features/ContentTypeValidation.feature:14)\n",
              "duration": 1369528,
              "status": "failed"
            },
            "line": 14,
            "name": "User sends a text to PurgoMalum in following type",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Hello World!"
                ]
              },
              {
                "cells": [
                  "request type",
                  "xml"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 308808,
              "status": "skipped"
            },
            "line": 17,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 487910,
              "status": "skipped"
            },
            "line": 18,
            "name": "User should get correct type as response",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_correct_type_as_response()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@contentType"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@positive"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.599Z",
        "line": 21,
        "name": "User should be able to send a text in content type \"plain\"",
        "description": "",
        "id": "content-type-validation-tests;user-should-be-able-to-send-a-text-in-content-type-\"plain\"",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.getText(PurgoMalumManager.java:25)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(PurgoMalumStepDefs.java:51)\n\tat ✽.User sends a text to PurgoMalum in following type(file:src/test/resources/features/ContentTypeValidation.feature:22)\n",
              "duration": 2174361,
              "status": "failed"
            },
            "line": 22,
            "name": "User sends a text to PurgoMalum in following type",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Hello World!"
                ]
              },
              {
                "cells": [
                  "request type",
                  "plain"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 833698,
              "status": "skipped"
            },
            "line": 25,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 535368,
              "status": "skipped"
            },
            "line": 26,
            "name": "User should get correct type as response",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_correct_type_as_response()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@contentType"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@positive"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.609Z",
        "line": 29,
        "name": "User should not be able to send a text in invalid content type",
        "description": "",
        "id": "content-type-validation-tests;user-should-not-be-able-to-send-a-text-in-invalid-content-type",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.getText(PurgoMalumManager.java:25)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(PurgoMalumStepDefs.java:51)\n\tat ✽.User sends a text to PurgoMalum in following type(file:src/test/resources/features/ContentTypeValidation.feature:30)\n",
              "duration": 2885160,
              "status": "failed"
            },
            "line": 30,
            "name": "User sends a text to PurgoMalum in following type",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum_in_following_type(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Hello World!"
                ]
              },
              {
                "cells": [
                  "request type",
                  "some text"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 504833,
              "status": "skipped"
            },
            "line": 33,
            "name": "User should get status code 404",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@contentType"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@negative"
          }
        ]
      }
    ],
    "name": "Content Type Validation Tests",
    "description": "",
    "id": "content-type-validation-tests",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/ContentTypeValidation.feature",
    "tags": [
      {
        "name": "@PurgoMalumTest",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@contentType",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 17
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-05-20T18:36:49.618Z",
        "line": 5,
        "name": "User should be able to add some words as profanity list and mask it by \u0027*\u0027",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-words-as-profanity-list-and-mask-it-by--*-",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:6)\n",
              "duration": 2745667,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  ""
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 442767,
              "status": "skipped"
            },
            "line": 10,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 426572,
              "status": "skipped"
            },
            "line": 11,
            "name": "User should get newly added profanity word as masked",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_newly_added_profanity_word_as_masked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@MaskingWith*"
          },
          {
            "name": "@EmptyReplaceKey"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.651Z",
        "line": 16,
        "name": "User should be able to add some words as profanity list and replace it by \u0027removed\u0027",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-words-as-profanity-list-and-replace-it-by--removed-",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:17)\n",
              "duration": 4248685,
              "status": "failed"
            },
            "line": 17,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly,very"
                ]
              },
              {
                "cells": [
                  "replace",
                  "[removed]"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 374651,
              "status": "skipped"
            },
            "line": 21,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 614641,
              "status": "skipped"
            },
            "line": 22,
            "name": "User should get newly added profanity word as masked",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_newly_added_profanity_word_as_masked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithWord"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.662Z",
        "line": 25,
        "name": "User should be able to add some words as profanity list and replace it by ignoring the uppercase",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-words-as-profanity-list-and-replace-it-by-ignoring-the-uppercase",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:26)\n",
              "duration": 2305036,
              "status": "failed"
            },
            "line": 26,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Silly is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "[replaced]"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 343429,
              "status": "skipped"
            },
            "line": 30,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 324156,
              "status": "skipped"
            },
            "line": 31,
            "name": "User should get newly added profanity word as masked",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_newly_added_profanity_word_as_masked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@MaskinWithWord"
          },
          {
            "name": "@ignoringUpperCase"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.669Z",
        "line": 36,
        "name": "User should not be able to add more than 10 words as profanity list",
        "description": "",
        "id": "profanity-masking-tests;user-should-not-be-able-to-add-more-than-10-words-as-profanity-list",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:37)\n",
              "duration": 1562341,
              "status": "failed"
            },
            "line": 37,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly but sometimes he makes some jokes and that makes us really happy"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly,but,jokes,that,makes,us,really,happy,is,very,he"
                ]
              },
              {
                "cells": [
                  "replace",
                  "[removed]"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 342693,
              "status": "skipped"
            },
            "line": 41,
            "name": "User should get status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 649522,
              "status": "skipped"
            },
            "line": 42,
            "name": "User should get following error message",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_following_error_message(String)"
            },
            "rows": [
              {
                "cells": [
                  "User Black List Exceeds Limit of 10 Words."
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithWord"
          },
          {
            "name": "@negative"
          },
          {
            "name": "@boundry"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.675Z",
        "line": 48,
        "name": "User should not be able to add a word more than 200 characters as profanity list",
        "description": "",
        "id": "profanity-masking-tests;user-should-not-be-able-to-add-a-word-more-than-200-characters-as-profanity-list",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:49)\n",
              "duration": 1451551,
              "status": "failed"
            },
            "line": 49,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly but sometimes he makes some jokes and that makes us really happy"
                ]
              },
              {
                "cells": [
                  "word",
                  "sillyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
                ]
              },
              {
                "cells": [
                  "replace",
                  "[removed]"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 309959,
              "status": "skipped"
            },
            "line": 53,
            "name": "User should get status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 563350,
              "status": "skipped"
            },
            "line": 54,
            "name": "User should get following error message",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_following_error_message(String)"
            },
            "rows": [
              {
                "cells": [
                  "User Black List Exceeds Limit of 10 Words."
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithWord"
          },
          {
            "name": "@negative"
          },
          {
            "name": "@boundry"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.680Z",
        "line": 60,
        "name": "User should not be able to add a replacement word more that 20 characters",
        "description": "",
        "id": "profanity-masking-tests;user-should-not-be-able-to-add-a-replacement-word-more-that-20-characters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:61)\n",
              "duration": 1647611,
              "status": "failed"
            },
            "line": 61,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "thistextismorethantwenty"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 343074,
              "status": "skipped"
            },
            "line": 65,
            "name": "User should get status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 580212,
              "status": "skipped"
            },
            "line": 66,
            "name": "User should get following error message",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_following_error_message(String)"
            },
            "rows": [
              {
                "cells": [
                  "User Replacement Text Exceeds Limit of 20 Characters."
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithWord"
          },
          {
            "name": "@negative"
          },
          {
            "name": "@boundry"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.686Z",
        "line": 70,
        "name": "User should be able to add some symbols in replacement word",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-symbols-in-replacement-word",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:71)\n",
              "duration": 1413262,
              "status": "failed"
            },
            "line": 71,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "[\u003d]]!\""
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 323833,
              "status": "skipped"
            },
            "line": 75,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 292760,
              "status": "skipped"
            },
            "line": 76,
            "name": "User should get newly added profanity word as masked",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_newly_added_profanity_word_as_masked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@MaskinWithChars"
          },
          {
            "name": "@validSymbol"
          },
          {
            "name": "@positive"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.690Z",
        "line": 81,
        "name": "User should be able to add some symbols in replacement word",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-symbols-in-replacement-word",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanity(PurgoMalumManager.java:47)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(PurgoMalumStepDefs.java:93)\n\tat ✽.User sends following text and adds following word as Profanity(file:src/test/resources/features/ProfanityMasking.feature:82)\n",
              "duration": 3572171,
              "status": "failed"
            },
            "line": 82,
            "name": "User sends following text and adds following word as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_word_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "$£\u0026%#"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 545293,
              "status": "skipped"
            },
            "line": 86,
            "name": "User should get status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1283107,
              "status": "skipped"
            },
            "line": 87,
            "name": "User should get following error message",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_following_error_message(String)"
            },
            "rows": [
              {
                "cells": [
                  "Invalid User Replacement Text"
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithChars"
          },
          {
            "name": "@invalidSymbol"
          },
          {
            "name": "@negative"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.702Z",
        "line": 91,
        "name": "User should be able to add some words as profanity list and replace it by valid character",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-add-some-words-as-profanity-list-and-replace-it-by-valid-character",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanityChar(PurgoMalumManager.java:60)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_character_as_Profanity(PurgoMalumStepDefs.java:152)\n\tat ✽.User sends following text and adds following character as Profanity(file:src/test/resources/features/ProfanityMasking.feature:92)\n",
              "duration": 2167133,
              "status": "failed"
            },
            "line": 92,
            "name": "User sends following text and adds following character as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_character_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "_"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 355761,
              "status": "skipped"
            },
            "line": 96,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 330052,
              "status": "skipped"
            },
            "line": 97,
            "name": "User should get newly added profanity word as masked",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_newly_added_profanity_word_as_masked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@MaskinWithChars"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.708Z",
        "line": 102,
        "name": "User should be able to replace words by invalid character",
        "description": "",
        "id": "profanity-masking-tests;user-should-be-able-to-replace-words-by-invalid-character",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.addToProfanityChar(PurgoMalumManager.java:60)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_following_text_and_adds_following_character_as_Profanity(PurgoMalumStepDefs.java:152)\n\tat ✽.User sends following text and adds following character as Profanity(file:src/test/resources/features/ProfanityMasking.feature:103)\n",
              "duration": 1897347,
              "status": "failed"
            },
            "line": 103,
            "name": "User sends following text and adds following character as Profanity",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_following_text_and_adds_following_character_as_Profanity(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "He is very silly"
                ]
              },
              {
                "cells": [
                  "word",
                  "silly"
                ]
              },
              {
                "cells": [
                  "replace",
                  "@"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 825687,
              "status": "skipped"
            },
            "line": 107,
            "name": "User should get status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1204747,
              "status": "skipped"
            },
            "line": 108,
            "name": "User should get following error message",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_following_error_message(String)"
            },
            "rows": [
              {
                "cells": [
                  "Invalid User Replacement Characters"
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@profanityMaskingTest"
          },
          {
            "name": "@failed"
          },
          {
            "name": "@bug"
          },
          {
            "name": "@MaskinWithChars"
          },
          {
            "name": "@negative"
          }
        ]
      }
    ],
    "name": "Profanity Masking Tests",
    "description": "",
    "id": "profanity-masking-tests",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/ProfanityMasking.feature",
    "tags": [
      {
        "name": "@PurgoMalumTest",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@profanityMaskingTest",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 17
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-05-20T18:36:49.719Z",
        "line": 12,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027Hello World\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 1353337,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027Hello World\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027Hello World\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 854468,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 616520,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.736Z",
        "line": 13,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027Do not do any shit\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 1701077,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027Do not do any shit\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027Do not do any shit\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 472191,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 549950,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027true\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027true\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.743Z",
        "line": 14,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027Hey you swear\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 1352598,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027Hey you swear\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027Hey you swear\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 847799,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 634849,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.751Z",
        "line": 15,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027Do not be a twat\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 966374,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027Do not be a twat\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027Do not be a twat\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 376884,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 309146,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027true\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027true\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.758Z",
        "line": 16,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027What is wrong\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 883924,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027What is wrong\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027What is wrong\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 381648,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 587222,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.766Z",
        "line": 17,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027He is like silly\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 788432,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027He is like silly\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027He is like silly\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 280060,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 293471,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.772Z",
        "line": 18,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027Sorry for that words\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 851290,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027Sorry for that words\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027Sorry for that words\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 552195,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 667111,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      },
      {
        "start_timestamp": "2022-05-20T18:36:49.779Z",
        "line": 19,
        "name": "User should be able to validate a text contains profanity",
        "description": "",
        "id": "profanity-validation-test;user-should-be-able-to-validate-a-text-contains-profanity;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.containsProfanity(PurgoMalumManager.java:36)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(PurgoMalumStepDefs.java:71)\n\tat ✽.User sends a \u0027I am just testing\u0027 to PurgoMalum to check it in profanity list(file:src/test/resources/features/ProfanityValidation.feature:6)\n",
              "duration": 536378,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a \u0027I am just testing\u0027 to PurgoMalum to check it in profanity list",
            "match": {
              "arguments": [
                {
                  "val": "\u0027I am just testing\u0027",
                  "offset": 13
                }
              ],
              "location": "PurgoMalumStepDefs.user_sends_a_to_PurgoMalum_to_check_it_in_profanity_list(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 297437,
              "status": "skipped"
            },
            "line": 7,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 395070,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get following \u0027false\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027false\u0027",
                  "offset": 26
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_following(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@profanityValidationTest"
          }
        ]
      }
    ],
    "name": "Profanity Validation Test",
    "description": "",
    "id": "profanity-validation-test",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/ProfanityValidation.feature",
    "tags": [
      {
        "name": "@PurgoMalumTest",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-05-20T18:36:49.784Z",
        "line": 5,
        "name": "User should be able send a valid text and validate it",
        "description": "",
        "id": "textvalidationtest;user-should-be-able-send-a-valid-text-and-validate-it",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\n\tat com.Chip.microservices.PurgoMalumManager.getText(PurgoMalumManager.java:14)\n\tat com.Chip.stepDefinitions.PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum(PurgoMalumStepDefs.java:30)\n\tat ✽.User sends a text to PurgoMalum(file:src/test/resources/features/TextValidation.feature:6)\n",
              "duration": 1316589,
              "status": "failed"
            },
            "line": 6,
            "name": "User sends a text to PurgoMalum",
            "match": {
              "location": "PurgoMalumStepDefs.user_sends_a_text_to_PurgoMalum(String,String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "Hello World!"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 720436,
              "status": "skipped"
            },
            "line": 8,
            "name": "User should get status code 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 28
                }
              ],
              "location": "PurgoMalumStepDefs.user_should_get_status_code(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 877016,
              "status": "skipped"
            },
            "line": 9,
            "name": "User should get the correct text in response",
            "match": {
              "location": "PurgoMalumStepDefs.user_should_get_the_correct_text_in_response()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PurgoMalumTest"
          },
          {
            "name": "@suit"
          },
          {
            "name": "@textValidation"
          },
          {
            "name": "@positive"
          }
        ]
      }
    ],
    "name": "TextValidationTest",
    "description": "",
    "id": "textvalidationtest",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/TextValidation.feature",
    "tags": [
      {
        "name": "@PurgoMalumTest",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]